name: Fetch Latest Releases

on:
  schedule:
    - cron: '*/30 * * * *'
  workflow_dispatch:

jobs:
  fetch-latest-releases:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout this repository
        uses: actions/checkout@v3

      - name: Fetch release data and write to JSON
        run: |
          echo "{}" > all_releases.json
          echo "{}" > all_histories.json

          repos=("darksoldier1404/DPP-Core" "darksoldier1404/DP-Shop" "darksoldier1404/DP-SimplePrefix")

          for repo in "${repos[@]}"; do
            releases=$(curl -s "https://api.github.com/repos/$repo/releases?per_page=10")
            count=$(echo "$releases" | jq 'length')
            if [[ "$count" -eq 0 ]]; then
              continue
            fi

            # repo 이름에서 'darksoldier1404/' 제거
            repo_name=$(echo "$repo" | sed 's/darksoldier1404\///')

            md=""
            repo_releases="[]"

            for i in $(seq 0 $(($count - 1))); do
              name=$(echo "$releases" | jq -r ".[$i].name")
              tag=$(echo "$releases" | jq -r ".[$i].tag_name")
              url=$(echo "$releases" | jq -r ".[$i].html_url")
              date=$(echo "$releases" | jq -r ".[$i].published_at")
              body=$(echo "$releases" | jq -r ".[$i].body")

              if [[ "$tag" == "null" ]]; then
                continue
              fi

              # 커밋 링크로 변환
              formatted_body=$(echo "$body" | sed -E "s|- ([0-9a-f]{7,40}):|- [\1](https://github.com/$repo/commit/\1):|g")

              # JSON 객체 생성
              item=$(jq -n \
                --arg repo "$repo_name" \
                --arg name "$name" \
                --arg tag "$tag" \
                --arg url "$url" \
                --arg date "$date" \
                --arg body "$formatted_body" \
                '{repo: $repo, name: $name, tag: $tag, url: $url, published_at: $date, body: $body}')

              # 배열에 추가
              repo_releases=$(echo "$repo_releases" | jq ". += [$item]")

              # Markdown 형식 누적 (중복을 방지)
              md+="### 🔖 $tag\n[릴리스 바로가기]($url)\n$formatted_body\n\n"
            done

            # all_releases.json에 추가
            jq --arg repo "$repo_name" --argjson data "$repo_releases" '.[$repo] = $data' all_releases.json > tmp.json && mv tmp.json all_releases.json

            # all_histories.json에 추가
            jq --arg repo "$repo_name" --arg md "$md" '.[$repo] = $md' all_histories.json > tmp.json && mv tmp.json all_histories.json
          done

          # 최종 JSON 병합
          jq -n \
            --argjson releases "$(cat all_releases.json)" \
            --argjson update_history "$(cat all_histories.json)" \
            '{update_history: $update_history, releases: $releases}' > releases.json

      - name: Commit and push if changed
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add releases.json
          git diff --cached --quiet || git commit -m "Update releases.json with categorized release data and update history"
          git push
